/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.codegen.model.entity;

import static org.unidal.codegen.model.Constants.ATTR_PATH;
import static org.unidal.codegen.model.Constants.ENTITY_OUTPUT;

import java.util.ArrayList;
import java.util.List;

import org.unidal.codegen.model.BaseEntity;
import org.unidal.codegen.model.IVisitor;

public class OutputModel extends BaseEntity<OutputModel> {
   private String m_path;

   private String m_op;

   private String m_template;

   private String m_mode;

   private List<PropertyModel> m_properties = new ArrayList<PropertyModel>();

   public OutputModel() {
   }

   public OutputModel(String path) {
      m_path = path;
   }

   @Override
   public void accept(IVisitor visitor) {
      visitor.visitOutput(this);
   }

   public OutputModel addProperty(PropertyModel property) {
      m_properties.add(property);
      return this;
   }

   @Override
   public boolean equals(Object obj) {
      if (obj instanceof OutputModel) {
         OutputModel _o = (OutputModel) obj;

         if (!equals(getPath(), _o.getPath())) {
            return false;
         }

         return true;
      }

      return false;
   }

   public PropertyModel findProperty(String name) {
      for (PropertyModel property : m_properties) {
         if (!equals(property.getName(), name)) {
            continue;
         }

         return property;
      }

      return null;
   }

   public String getMode() {
      return m_mode;
   }

   public String getOp() {
      return m_op;
   }

   public String getPath() {
      return m_path;
   }

   public List<PropertyModel> getProperties() {
      return m_properties;
   }

   public String getTemplate() {
      return m_template;
   }

   @Override
   public int hashCode() {
      int hash = 0;

      hash = hash * 31 + (m_path == null ? 0 : m_path.hashCode());

      return hash;
   }

   @Override
   public void mergeAttributes(OutputModel other) {
      assertAttributeEquals(other, ENTITY_OUTPUT, ATTR_PATH, m_path, other.getPath());

      if (other.getOp() != null) {
         m_op = other.getOp();
      }

      if (other.getTemplate() != null) {
         m_template = other.getTemplate();
      }

      if (other.getMode() != null) {
         m_mode = other.getMode();
      }
   }

   public PropertyModel removeProperty(String name) {
      int len = m_properties.size();

      for (int i = 0; i < len; i++) {
         PropertyModel property = m_properties.get(i);

         if (!equals(property.getName(), name)) {
            continue;
         }

         return m_properties.remove(i);
      }

      return null;
   }

   public OutputModel setMode(String mode) {
      m_mode = mode;
      return this;
   }

   public OutputModel setOp(String op) {
      m_op = op;
      return this;
   }

   public OutputModel setPath(String path) {
      m_path = path;
      return this;
   }

   public OutputModel setTemplate(String template) {
      m_template = template;
      return this;
   }

}
