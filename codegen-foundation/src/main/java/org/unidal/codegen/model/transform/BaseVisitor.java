/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.codegen.model.transform;

import org.unidal.codegen.model.IVisitor;
import org.unidal.codegen.model.entity.Any;
import org.unidal.codegen.model.entity.CodegenModel;
import org.unidal.codegen.model.entity.FileModel;
import org.unidal.codegen.model.entity.ManifestModel;
import org.unidal.codegen.model.entity.NodeModel;
import org.unidal.codegen.model.entity.OutputModel;
import org.unidal.codegen.model.entity.OutputsModel;
import org.unidal.codegen.model.entity.PropertyModel;
import org.unidal.codegen.model.entity.StructureModel;

public abstract class BaseVisitor implements IVisitor {
   @Override
   public void visitAny(Any any) {
      for (Any child : any.getChildren()) {
         visitAny(child);
      }
   }

   @Override
   public void visitCodegen(CodegenModel codegen) {
      if (codegen.getManifest() != null) {
         visitManifest(codegen.getManifest());
      }

      if (codegen.getStructure() != null) {
         visitStructure(codegen.getStructure());
      }

      if (codegen.getOutputs() != null) {
         visitOutputs(codegen.getOutputs());
      }

      for (Any any : codegen.getData()) {
         visitAny(any);
      }
   }

   @Override
   public void visitFile(FileModel file) {
   }

   @Override
   public void visitManifest(ManifestModel manifest) {
      for (FileModel file : manifest.getFiles()) {
         visitFile(file);
      }
   }

   @Override
   public void visitNode(NodeModel node) {
      for (NodeModel node_ : node.getNodes()) {
         visitNode(node_);
      }
   }

   @Override
   public void visitOutput(OutputModel output) {
      for (PropertyModel property : output.getProperties()) {
         visitProperty(property);
      }
   }

   @Override
   public void visitOutputs(OutputsModel outputs) {
      for (OutputModel output : outputs.getOutputs()) {
         visitOutput(output);
      }
   }

   @Override
   public void visitProperty(PropertyModel property) {
   }

   @Override
   public void visitStructure(StructureModel structure) {
      if (structure.getNode() != null) {
         visitNode(structure.getNode());
      }
   }
}
