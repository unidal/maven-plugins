/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.maven.plugins.source.model.transform;

import static org.unidal.maven.plugins.source.model.Constants.ATTR_CLASS;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_CODEGEN;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_COMMENT;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_EMPTY;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_LINES;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_MAIN;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_NAME;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_PACKAGE;
import static org.unidal.maven.plugins.source.model.Constants.ATTR_TEST;

import org.xml.sax.Attributes;

import org.unidal.maven.plugins.source.model.entity.ClassModel;
import org.unidal.maven.plugins.source.model.entity.CountModel;
import org.unidal.maven.plugins.source.model.entity.ProjectModel;
import org.unidal.maven.plugins.source.model.entity.RootModel;

public class DefaultXmlMaker {

   public ClassModel buildClass(Attributes attributes) {
      String _package = attributes.getValue(ATTR_PACKAGE);
      String _class = attributes.getValue(ATTR_CLASS);
      String main = attributes.getValue(ATTR_MAIN);
      String codegen = attributes.getValue(ATTR_CODEGEN);
      String test = attributes.getValue(ATTR_TEST);
      ClassModel class_ = new ClassModel();

      if (_package != null) {
         class_.setPackage(_package);
      }

      if (_class != null) {
         class_.setClazz(_class);
      }

      if (main != null) {
         class_.setMain(convert(Boolean.class, main, null));
      }

      if (codegen != null) {
         class_.setCodegen(convert(Boolean.class, codegen, null));
      }

      if (test != null) {
         class_.setTest(convert(Boolean.class, test, null));
      }

      return class_;
   }

   public CountModel buildCount(Attributes attributes) {
      String lines = attributes.getValue(ATTR_LINES);
      String empty = attributes.getValue(ATTR_EMPTY);
      String comment = attributes.getValue(ATTR_COMMENT);
      CountModel count = new CountModel();

      if (lines != null) {
         count.setLines(convert(Integer.class, lines, 0));
      }

      if (empty != null) {
         count.setEmpty(convert(Integer.class, empty, 0));
      }

      if (comment != null) {
         count.setComment(convert(Integer.class, comment, 0));
      }

      return count;
   }

   public ProjectModel buildProject(Attributes attributes) {
      String name = attributes.getValue(ATTR_NAME);
      ProjectModel project = new ProjectModel();

      if (name != null) {
         project.setName(name);
      }

      return project;
   }

   public RootModel buildRoot(Attributes attributes) {
      RootModel root = new RootModel();

      return root;
   }

   @SuppressWarnings("unchecked")
   protected <T> T convert(Class<T> type, String value, T defaultValue) {
      if (value == null || value.length() == 0) {
         return defaultValue;
      }

      if (type == Boolean.class || type == Boolean.TYPE) {
         return (T) Boolean.valueOf(value);
      } else if (type == Integer.class || type == Integer.TYPE) {
         return (T) Integer.valueOf(value);
      } else if (type == Long.class || type == Long.TYPE) {
         return (T) Long.valueOf(value);
      } else if (type == Short.class || type == Short.TYPE) {
         return (T) Short.valueOf(value);
      } else if (type == Float.class || type == Float.TYPE) {
         return (T) Float.valueOf(value);
      } else if (type == Double.class || type == Double.TYPE) {
         return (T) Double.valueOf(value);
      } else if (type == Byte.class || type == Byte.TYPE) {
         return (T) Byte.valueOf(value);
      } else if (type == Character.class || type == Character.TYPE) {
         return (T) (Character) value.charAt(0);
      } else {
         return (T) value;
      }
   }
}
