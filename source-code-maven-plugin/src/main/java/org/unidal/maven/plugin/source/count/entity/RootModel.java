/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package org.unidal.maven.plugin.source.count.entity;

import java.util.LinkedHashMap;
import java.util.Map;

import org.unidal.maven.plugin.source.count.BaseEntity;
import org.unidal.maven.plugin.source.count.IVisitor;

public class RootModel extends BaseEntity<RootModel> {
   private CountModel m_count;

   private Map<String, ProjectModel> m_projects = new LinkedHashMap<String, ProjectModel>();

   public RootModel() {
   }

   @Override
   public void accept(IVisitor visitor) {
      visitor.visitRoot(this);
   }

   public RootModel addProject(ProjectModel project) {
      m_projects.put(project.getName(), project);
      return this;
   }

   @Override
   public boolean equals(Object obj) {
      if (obj instanceof RootModel) {
         RootModel _o = (RootModel) obj;

         if (!equals(getCount(), _o.getCount())) {
            return false;
         }

         if (!equals(getProjects(), _o.getProjects())) {
            return false;
         }


         return true;
      }

      return false;
   }

   public ProjectModel findProject(String name) {
      return m_projects.get(name);
   }

   public ProjectModel findOrCreateProject(String name) {
      ProjectModel project = m_projects.get(name);

      if (project == null) {
         synchronized (m_projects) {
            project = m_projects.get(name);

            if (project == null) {
               project = new ProjectModel(name);
               m_projects.put(name, project);
            }
         }
      }

      return project;
   }

   public CountModel getCount() {
      return m_count;
   }

   public Map<String, ProjectModel> getProjects() {
      return m_projects;
   }

   @Override
   public int hashCode() {
      int hash = 0;

      hash = hash * 31 + (m_count == null ? 0 : m_count.hashCode());
      hash = hash * 31 + (m_projects == null ? 0 : m_projects.hashCode());

      return hash;
   }

   @Override
   public void mergeAttributes(RootModel other) {
   }

   public ProjectModel removeProject(String name) {
      return m_projects.remove(name);
   }

   public RootModel setCount(CountModel count) {
      m_count = count;
      return this;
   }

}
